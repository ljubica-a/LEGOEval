[{"/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/index.js":"1","/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/reportWebVitals.js":"2","/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/App.js":"3","/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/Start.js":"4","/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/Page.js":"5","/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/LoadMTurk.js":"6","/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/RandomExample.js":"7","/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/SubmitMTurk.js":"8","/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/Survey.js":"9","/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/chatbot/Chatbot.js":"10","/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/chatbot/ActionProvider.js":"11","/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/chatbot/chatbotConfig.js":"12","/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/chatbot/MessageParser.js":"13"},{"size":500,"mtime":1614278926455,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1614278926456,"results":"16","hashOfConfig":"15"},{"size":272,"mtime":1614278926453,"results":"17","hashOfConfig":"15"},{"size":1908,"mtime":1614573329973,"results":"18","hashOfConfig":"15"},{"size":1186,"mtime":1614572696335,"results":"19","hashOfConfig":"15"},{"size":1461,"mtime":1614572696335,"results":"20","hashOfConfig":"15"},{"size":1160,"mtime":1614572696335,"results":"21","hashOfConfig":"15"},{"size":1573,"mtime":1614572696336,"results":"22","hashOfConfig":"15"},{"size":3423,"mtime":1614572696336,"results":"23","hashOfConfig":"15"},{"size":2511,"mtime":1614581607719,"results":"24","hashOfConfig":"15"},{"size":1206,"mtime":1614566115531,"results":"25","hashOfConfig":"15"},{"size":179,"mtime":1614566115531,"results":"26","hashOfConfig":"15"},{"size":330,"mtime":1614566115531,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"12se7gu",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/index.js",[],["63","64"],"/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/reportWebVitals.js",[],"/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/App.js",["65"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Start from './Start';\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">        \n        <Start />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/Start.js",["66"],"import React from 'react';\nimport axios from 'axios';\n\n\nimport Page from './Page';\nimport RandomExample from './RandomExample';\nimport LoadMTurk from './LoadMTurk';\nimport SubmitMTurk from './SubmitMTurk';\nimport Survey from './Survey'\nimport MyChatbot from \"./chatbot/Chatbot\";\n// Import your new components here!\n\n\nclass Start extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {};\n    }\n\n    componentDidMount() {      \n      this.getLatestState();\n    }    \n        \n    getLatestState = () => {      \n      // const url = window.location.href;\n      const url = window.location.href.split('?')[0];\n      axios.get(url+ \"/init\").then((res) => {        \n        if (res != null) {\n          this.setState(res.data);\n        }         \n      }).catch((error)=>{\n        console.log(error);\n     });\n    }\n\n    render() {      \n      return (\n        <div>\n          {(() => {\n            \n            if (this.state.pipeline == undefined) return <p>Loading...</p>;\n\n            const name = this.state.pipeline[0].name; \n            \n            switch (name) {\n\n              case 'Page':\n                return <Page advance={this.getLatestState}/>;\n\n              case 'RandomExample':\n                return <RandomExample advance={this.getLatestState}/>;\n\n              case 'LoadMTurk':\n                return <LoadMTurk advance={this.getLatestState}/>;\n\n              case 'SubmitMTurk':\n                return <SubmitMTurk advance={this.getLatestState}/>;\n\n              case 'Survey':\n                return <Survey advance={this.getLatestState}/>;\n\n              case 'MyChatbot':\n                return <MyChatbot advance={this.getLatestState}/>;\n\n              // Add more components here :)\n\n              default:\n                return <p>Unknown component!</p>;\n            }\n          })()}\n        </div>\n      );\n    }   \n}\n\n\nexport default Start;","/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/Page.js",["67"],"import React from 'react';\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button';\n\n\nclass Page extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {};\n    }\n\n    componentDidMount() {\n        const url = window.location.href.split('?')[0];          \n        axios.get(url+ \"/init\").then(res => {\n            this.setState(res.data);\n        })      \n    }\n\n    render() {\n      if (this.state.pipeline == undefined) return <p>Loading...</p>;      \n      const data = this.state.pipeline[0].data;\n      return (\n        <div>            \n            <h1>{data.title}</h1>            \n            <p>{data.description}</p>\n            <Button onClick={this.popComponent} variant=\"contained\" color=\"primary\">{data.button_name}</Button>            \n        </div>\n      );\n    }    \n\n    popComponent = () => {\n        const url = window.location.href.split('?')[0];            \n        axios.post(url+ \"/update\", \n        Object.assign({}, this.state, {instruction: 'advance'})).then(res => {\n            this.setState(res.data);             \n            this.props.advance();             \n        })\n    }\n}\n\n\nexport default Page;","/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/LoadMTurk.js",[],"/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/RandomExample.js",["68"],"import React from 'react';\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button';\n\n\nclass RandomExample extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {};\n    }\n\n    componentDidMount() {      \n        // const url = window.location.href;            \n        const url = window.location.href.split('?')[0];\n        axios.get(url+ \"/init\").then(res => {\n            this.setState(res.data);\n        })      \n    }\n\n    render() {\n\n      if (this.state.pipeline == undefined) return <p>Loading...</p>;     \n\n      const data = this.state.pipeline[0].data;\n\n      return (                    \n        <Button onClick={this.printInBackend} variant=\"contained\" color=\"primary\">{data.button_name}</Button>        \n      );\n    }    \n\n    printInBackend = () => {        \n        // const url = window.location.href;    \n        const url = window.location.href.split('?')[0];        \n        axios.post(url+ \"/update\", Object.assign({}, this.state, {instruction: 'print'})).then(res => {\n            this.setState(res.data);                     \n        })\n    }\n}\n\n\nexport default RandomExample; //here","/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/SubmitMTurk.js",["69"],"import React from 'react';\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button';\n\n\nclass SubmitMTurk extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {};\n    }\n\n    componentDidMount() {      \n        this.setState({complete: false});\n        // const url = window.location.href;            \n        const url = window.location.href.split('?')[0];\n        axios.get(url+ \"/init\").then(res => {\n            this.setState(res.data, function() {\n                this.notifyBackendToCompleteTask();\n            });            \n        })      \n    }\n\n    render() {\n        if (this.state.pipeline == undefined) return <p>Loading...</p>;\n        return (\n            <form name=\"mturk_form\" method=\"post\" id=\"mturk_form\" action={this.state.mturk.end_point}>\n                <input type=\"hidden\" value={this.state.mturk.assignment_id} name=\"assignmentId\" id={this.state.mturk.assignment_id}/>\n                <input type=\"hidden\" value='foo' name=\"bar\"/>\n                <input type=\"hidden\" value={this.state.mturk.end_point} name = \"end_point\"/>\n                <Button type=\"submit\">Click here to finish task</Button>\n            </form>\n        );     \n    }\n\n    notifyBackendToCompleteTask = () => {        \n        const url = window.location.href.split('?')[0]; \n        axios.post(url+ \"/update\",\n        Object.assign({}, this.state, {instruction: 'mark_complete', complete: true})).then(res => {            \n            this.setState(res.data);            \n        })\n    }\n}\n\n\nexport default SubmitMTurk;","/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/Survey.js",["70"],"import React from 'react';\nimport axios from 'axios';\n\nimport * as Surveys from \"survey-react\";\nimport \"survey-react/survey.css\";\n\nclass Survey extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {};\n    }\n\n    componentDidMount() {\n        const url = window.location.href.split('?')[0];\n        axios.get(url+ \"/init\").then(res => {\n            this.setState(res.data);\n        })\n    }\n\n    render() {\n        if (this.state.pipeline == undefined) return <p>Loading...</p>;\n\n        const data = this.state.pipeline[0].data;\n        let json = {};\n        if (data.hasOwnProperty(\"questions\")) {\n            json = {title: data.title, showProgressBar: \"top\", questions: []}\n            for (var i = 0; i < data.questions.length; i++) {\n                json.questions.push(this.parseQuestion(JSON.parse(data.questions[i])));\n            }\n        }\n        let model = new Surveys.Model(json);\n\n        return (\n          <Surveys.Survey model={model} onComplete={this.popComponent}/>\n        );\n    }\n\n    parseQuestion(question) {\n        let parsed;\n        switch (question[\"type\"]){\n            case \"radiogroup\":\n                parsed = { type: question[\"type\"], name: question[\"name\"], title: question[\"title\"],\n                        isRequired: question[\"isRequired\"], colCount: question[\"colCount\"],\n                        choices: question[\"choices\"]};\n                break;\n            case \"checkbox\":\n                parsed = { type: question[\"type\"], name: question[\"name\"], title: question[\"title\"],\n                        isRequired: question[\"isRequired\"], colCount: question[\"colCount\"],\n                        hasNone: question[\"hasNone\"], choices: question[\"choices\"]};\n                break;\n            case \"text\":\n                parsed = { type: question[\"type\"], name: question[\"name\"], title: question[\"title\"],\n                        isRequired: question[\"isRequired\"], placeHolder: question[\"placeHolder\"],\n                        autoComplete: question[\"autoComplete\"]};\n                break;\n            case \"rating\":\n                parsed = { type: question[\"type\"], name: question[\"name\"], title: question[\"title\"],\n                        minRateDescription: question[\"minRateDescription\"],\n                        maxRateDescription: question[\"maxRateDescription\"]};\n                break;\n            case \"comment\":\n                parsed = { type: question[\"type\"], name: question[\"name\"], title: question[\"title\"]};\n                break;\n            case \"matrix\":\n                parsed = { type: question[\"type\"], name: question[\"name\"], title: question[\"title\"],\n                        columns: question[\"columns\"], rows: question[\"rows\"]};\n                break;\n            default:\n                parsed = {};\n        }\n        return parsed;\n    }\n\n    popComponent = (survey, options) => {\n\n        const data = this.state.pipeline[0].data;\n\n        var surveyTitleStr = data.title;\n        var surveyData = JSON.stringify(survey.data);\n\n        var updateVal = {};\n        updateVal['instruction'] = 'advance';\n        updateVal[surveyTitleStr] = surveyData\n\n        const url = window.location.href.split('?')[0];\n        axios.post(url+ \"/update\", Object.assign({}, this.state, updateVal)).then(res => {\n            this.setState(res.data);\n            this.props.advance();\n        })\n    }\n\n}\n\nexport default Survey;","/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/chatbot/Chatbot.js",["71","72","73","74"],"/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/chatbot/ActionProvider.js",[],["75","76"],"/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/chatbot/chatbotConfig.js",[],"/Users/josharnold/Desktop/CrowdSourceFrameworkII/app/react_app/src/chatbot/MessageParser.js",[],["77","78"],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":2,"column":8,"nodeType":"85","messageId":"86","endLine":2,"endColumn":12},{"ruleId":"87","severity":1,"message":"88","line":42,"column":37,"nodeType":"89","messageId":"90","endLine":42,"endColumn":39},{"ruleId":"87","severity":1,"message":"88","line":21,"column":31,"nodeType":"89","messageId":"90","endLine":21,"endColumn":33},{"ruleId":"87","severity":1,"message":"88","line":23,"column":31,"nodeType":"89","messageId":"90","endLine":23,"endColumn":33},{"ruleId":"87","severity":1,"message":"88","line":25,"column":33,"nodeType":"89","messageId":"90","endLine":25,"endColumn":35},{"ruleId":"87","severity":1,"message":"88","line":22,"column":33,"nodeType":"89","messageId":"90","endLine":22,"endColumn":35},{"ruleId":"83","severity":1,"message":"91","line":2,"column":8,"nodeType":"85","messageId":"86","endLine":2,"endColumn":15},{"ruleId":"83","severity":1,"message":"92","line":4,"column":8,"nodeType":"85","messageId":"86","endLine":4,"endColumn":14},{"ruleId":"83","severity":1,"message":"93","line":5,"column":8,"nodeType":"85","messageId":"86","endLine":5,"endColumn":21},{"ruleId":"83","severity":1,"message":"94","line":56,"column":15,"nodeType":"85","messageId":"86","endLine":56,"endColumn":19},{"ruleId":"79","replacedBy":"95"},{"ruleId":"81","replacedBy":"96"},{"ruleId":"79","replacedBy":"97"},{"ruleId":"81","replacedBy":"98"},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Chatbot' is defined but never used.","'config' is defined but never used.","'MessageParser' is defined but never used.","'data' is assigned a value but never used.",["99"],["100"],["99"],["100"],"no-global-assign","no-unsafe-negation"]
[{"/Users/josharnold/Desktop/LEGOEval/app/react_app/src/index.js":"1","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/App.js":"2","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/reportWebVitals.js":"3","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/Start.js":"4","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/RandomExample.js":"5","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/Page.js":"6","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/LoadMTurk.js":"7","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/PostChatSurvey.js":"8","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/Survey.js":"9","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/CompareChats.js":"10","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/CompareChatsSurvey.js":"11","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/SubmitMTurk.js":"12","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/chatbot/Chatbot.js":"13","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/ConversationSurvey.js":"14"},{"size":500,"mtime":1620701755940,"results":"15","hashOfConfig":"16"},{"size":272,"mtime":1620701755936,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1620701755940,"results":"18","hashOfConfig":"16"},{"size":2582,"mtime":1620701929568,"results":"19","hashOfConfig":"16"},{"size":1160,"mtime":1620701755938,"results":"20","hashOfConfig":"16"},{"size":1177,"mtime":1620701755938,"results":"21","hashOfConfig":"16"},{"size":1764,"mtime":1620701755937,"results":"22","hashOfConfig":"16"},{"size":1619,"mtime":1620701755938,"results":"23","hashOfConfig":"16"},{"size":4684,"mtime":1620701755939,"results":"24","hashOfConfig":"16"},{"size":3989,"mtime":1620701991747,"results":"25","hashOfConfig":"16"},{"size":462,"mtime":1620701755937,"results":"26","hashOfConfig":"16"},{"size":1609,"mtime":1620701755938,"results":"27","hashOfConfig":"16"},{"size":4167,"mtime":1620701755939,"results":"28","hashOfConfig":"16"},{"size":2085,"mtime":1620703492282,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1rjx3sm",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"32"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/josharnold/Desktop/LEGOEval/app/react_app/src/index.js",[],["70","71"],"/Users/josharnold/Desktop/LEGOEval/app/react_app/src/App.js",["72"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Start from './Start';\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">        \n        <Start />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/reportWebVitals.js",[],"/Users/josharnold/Desktop/LEGOEval/app/react_app/src/Start.js",["73"],"import React from 'react';\nimport axios from 'axios';\n\n\nimport Page from './Page';\nimport RandomExample from './RandomExample';\nimport LoadMTurk from './LoadMTurk';\nimport SubmitMTurk from './SubmitMTurk';\nimport Survey from './Survey'\nimport MyChatbot from \"./chatbot/Chatbot\";\nimport CompareChats from \"./CompareChats\";\nimport CompareChatsSurvey from \"./CompareChatsSurvey\";\nimport PostChatSurvey from \"./PostChatSurvey\";\nimport ConversationSurvey from \"./ConversationSurvey\";\n// Import your new components here!\n\n\nclass Start extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {};\n    }\n\n    componentDidMount() {      \n      this.getLatestState();\n    }    \n        \n    getLatestState = () => {      \n      // const url = window.location.href;\n      const url = window.location.href.split('?')[0];\n      axios.get(url+ \"/init\").then((res) => {        \n        if (res != null) {\n          this.setState(res.data);\n        }         \n      }).catch((error)=>{\n        console.log(error);\n     });\n    }\n\n    render() {      \n      return (\n        <div>\n          {(() => {\n            \n            if (this.state.pipeline == undefined) return <p>Loading...</p>;\n\n            const name = this.state.pipeline[0].name; \n            \n            switch (name) {\n\n              case 'Page':\n                return <Page advance={this.getLatestState}/>;\n\n              case 'RandomExample':\n                return <RandomExample advance={this.getLatestState}/>;\n\n              case 'LoadMTurk':\n                return <LoadMTurk advance={this.getLatestState}/>;\n\n              case 'SubmitMTurk':\n                return <SubmitMTurk advance={this.getLatestState}/>;\n\n              case 'Survey':\n                return <Survey advance={this.getLatestState}/>;\n\n              case 'MyChatbot':\n                return <MyChatbot advance={this.getLatestState}/>;\n\n              case 'CompareChats':\n                return <CompareChats showButtons={true} advance={this.getLatestState}/>;\n\n              case 'CompareChatsSurvey':\n                return <CompareChatsSurvey advance={this.getLatestState} />;\n\n              case 'PostChatSurvey':\n                return <PostChatSurvey advance={this.getLatestState} />;\n\n              case 'ConversationSurvey':\n                return <ConversationSurvey advance={this.getLatestState} />;\n\n              // Add more components here :)\n\n              default:\n                return <p>Unknown component!</p>;\n            }\n          })()}\n        </div>\n      );\n    }   \n}\n\n\nexport default Start;","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/RandomExample.js",["74"],"import React from 'react';\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button';\n\n\nclass RandomExample extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {};\n    }\n\n    componentDidMount() {      \n        // const url = window.location.href;            \n        const url = window.location.href.split('?')[0];\n        axios.get(url+ \"/init\").then(res => {\n            this.setState(res.data);\n        })      \n    }\n\n    render() {\n\n      if (this.state.pipeline == undefined) return <p>Loading...</p>;     \n\n      const data = this.state.pipeline[0].data;\n\n      return (                    \n        <Button onClick={this.printInBackend} variant=\"contained\" color=\"primary\">{data.button_name}</Button>        \n      );\n    }    \n\n    printInBackend = () => {        \n        // const url = window.location.href;    \n        const url = window.location.href.split('?')[0];        \n        axios.post(url+ \"/update\", Object.assign({}, this.state, {instruction: 'print'})).then(res => {\n            this.setState(res.data);                     \n        })\n    }\n}\n\n\nexport default RandomExample; //here","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/Page.js",["75"],"import React from 'react';\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button';\n\n\nclass Page extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {};\n    }\n\n    componentDidMount() {\n        const url = window.location.href.split('?')[0]; \n        axios.get(url+ \"/init\").then(res => {\n            this.setState(res.data);\n        })      \n    }\n\n    render() {\n      if (this.state.pipeline == undefined) return <p>Loading...</p>;      \n      const data = this.state.pipeline[0].data;\n      return (\n        <div>            \n            <h1>{data.title}</h1>            \n            <p>{data.description}</p>\n            <Button onClick={this.popComponent} variant=\"contained\" color=\"primary\">{data.button_name}</Button>            \n        </div>\n      );\n    }    \n\n    popComponent = () => {\n        const url = window.location.href.split('?')[0];            \n        axios.post(url+ \"/update\", \n        Object.assign({}, this.state, {instruction: 'advance'})).then(res => {\n            this.setState(res.data);             \n            this.props.advance();             \n        })\n    }\n}\n\n\nexport default Page;","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/LoadMTurk.js",["76"],"import React from 'react';\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button';\n\n\nclass LoadMTurk extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {};\n    }\n\n    componentDidMount() {      \n        // const url = window.location.href;    \n        const url = window.location.href.split('?')[0];\n        axios.get(url+ \"/init\").then(res => {\n            this.setState(res.data);\n            this.requestMTurkInfo();\n        })\n    }\n\n    render() {        \n        if (this.state.pipeline == undefined) return <p>Loading...</p>;      \n        const data = this.state.pipeline[0].data;\n        return (\n          <div>            \n              <h1>{data.title}</h1>            \n              <p>{data.description}</p>\n              <Button onClick={this.requestMTurkInfo} variant=\"contained\" color=\"primary\">Start Task</Button>\n          </div>\n        );        \n    }    \n\n    requestMTurkInfo = () => {\n        const url = window.location.href.split('?')[0];     \n        const assignmentID = window.location.href.split('?')[1].split('&')[0].split(\"=\")[1];\n        if (assignmentID.includes(\"ASSIGNMENT_ID_NOT_AVAILABLE\")) return;                \n        var end_point_val = window.location.href.split('?')[1].split(\"&\")[3].split(\"=\")[1] + \"/mturk/externalSubmit\";        \n        end_point_val = decodeURIComponent(end_point_val);\n        console.log(end_point_val);\n        axios.post(url+ \"/update\",\n            Object.assign({}, this.state, {instruction: 'advance', mturk: {assignment_id: assignmentID, end_point: end_point_val}})).then(res => {            \n                this.setState(res.data);  \n                this.props.advance();          \n        })\n    }\n}\n\n\nexport default LoadMTurk;","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/PostChatSurvey.js",["77","78","79"],"import React from 'react';\nimport axios from 'axios';\nimport Survey from './Survey'\n\n\nclass MessageList extends React.Component {\n    render() {\n      return (      \n          <div className=\"message-list\" style={{width: 500}}>                 \n              {this.props.messages.map(message => {\n                  return (\n                    <div class=\"bubbleWrapper\">\n                      <div class={\"You\" == message.senderId ? \"inlineContainer own\" : \"inlineContainer\"}>\n                        <div className={\"You\" != message.senderId ?\"otherBubble other\" : \"ownBubble own\"}>{message.text}</div>\n                      </div>\n                      <span className={\"You\" != message.senderId ?\"other\" : \"own\"}>{message.senderId}</span>\n                    </div>\n                  )\n                })\n              }\n        </div>\n      )\n    }\n  }\n\n\nclass PostChatSurvey extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {messages: [], text: \"\"};      \n    }\n\n    componentDidMount() {\n        const url = window.location.href.split('?')[0];\n        axios.get(url+ \"/init\").then(res => {\n            this.setState(res.data, function() {\n              // pass\n            });\n        })\n    }\n\n    render() {      \n      return (\n        <div>\n          <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', height: '100vh', flexDirection: 'column'}}>\n            <MessageList messages={this.state.messages} />\n          </div>\n            <Survey advance={this.props.advance} />\n        </div>\n      );\n    }  \n}\n\n\nexport default PostChatSurvey;","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/Survey.js",["80"],"import React from 'react';\nimport axios from 'axios';\n\nimport * as Surveys from \"survey-react\";\nimport \"survey-react/modern.css\";\nimport \"./Survey.css\";\n\nclass Survey extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {};\n    }\n\n    componentDidMount() {\n        const url = window.location.href.split('?')[0];\n        axios.get(url+ \"/init\").then(res => {\n            this.setState(res.data);\n        })\n    }\n\n    render() {\n        if (this.state.pipeline == undefined) return <p>Loading...</p>;\n        const data = this.state.pipeline[0].data;\n        let json = {};\n        if (data.hasOwnProperty(\"questions\")) {\n            json = {title: data.title, showProgressBar: \"top\", questions: []}\n            for (var i = 0; i < data.questions.length; i++) {\n                json.questions.push(this.parseQuestion(JSON.parse(data.questions[i])));\n            }\n        }\n        Surveys.StylesManager.applyTheme(\"modern\");\n        let model = new Surveys.Model(json);\n        return (\n          <Surveys.Survey model={model} onUpdateQuestionCssClasses={this.customizeTheme} onComplete={this.popComponent}/>\n        );\n    }\n\n    parseQuestion(question) {\n        let parsed;\n        switch (question[\"type\"]){\n            case \"radiogroup\":\n                parsed = { type: question[\"type\"], name: question[\"name\"], title: question[\"title\"],\n                        isRequired: question[\"isRequired\"], colCount: question[\"colCount\"],\n                        choices: question[\"choices\"]};\n                break;\n            case \"checkbox\":\n                parsed = { type: question[\"type\"], name: question[\"name\"], title: question[\"title\"],\n                        isRequired: question[\"isRequired\"], colCount: question[\"colCount\"],\n                        hasNone: question[\"hasNone\"], choices: question[\"choices\"]};\n                break;\n            case \"text\":\n                parsed = { type: question[\"type\"], name: question[\"name\"], title: question[\"title\"],\n                        isRequired: question[\"isRequired\"], placeHolder: question[\"placeHolder\"],\n                        autoComplete: question[\"autoComplete\"]};\n                break;\n            case \"rating\":\n                parsed = { type: question[\"type\"], name: question[\"name\"], title: question[\"title\"],\n                        minRateDescription: question[\"minRateDescription\"],\n                        maxRateDescription: question[\"maxRateDescription\"]};\n                break;\n            case \"comment\":\n                parsed = { type: question[\"type\"], name: question[\"name\"], title: question[\"title\"]};\n                break;\n            case \"matrix\":\n                parsed = { type: question[\"type\"], name: question[\"name\"], title: question[\"title\"],\n                        columns: question[\"columns\"], rows: question[\"rows\"]};\n                break;\n            default:\n                parsed = {};\n        }\n        return parsed;\n    }\n\n    customizeTheme = (survey, options) => {\n        var classes = options.cssClasses;\n\n            classes.mainRoot += \" sv_qstn\";\n            classes.root = \"sq-root\";\n            classes.title += \" sq-title\";\n            classes.item += \" sq-item\";\n\n            if (options.question.isRequired) {\n                classes.title += \" sq-title-required\";\n            }\n\n            switch (options.question.getType()) {\n                case \"radiogroup\":\n                    classes.root += \" sq-root-rg\";\n                    break;\n                case \"checkbox\":\n                    classes.root += \" sq-root-cb\";\n                    break;\n                case \"text\":\n                    classes.root += \" sq-root-text\";\n                    break;\n                case \"rating\":\n                    classes.root += \" sq-root-rating\";\n                    break;\n                case \"comment\":\n                    classes.root += \" sq-root-comment\";\n                    break;\n                case \"matrix\":\n                    classes.root += \" sq-root-matrix\";\n                    break;\n                default:\n            }\n    }\n\n    popComponent = (survey, options) => {\n        const url = window.location.href.split('?')[0];\n\n        const data = this.state.pipeline[0].data;\n\n        var surveyTitleStr = data.title;\n        var surveyData = JSON.stringify(survey.data);\n\n        var updateVal = {};\n        updateVal['instruction'] = 'advance';\n        updateVal[surveyTitleStr] = surveyData\n\n        axios.post(url+ \"/update\", Object.assign({}, this.state, updateVal)).then(res => {\n            this.setState(res.data);\n            this.props.advance();\n        })\n    }\n\n}\n\nexport default Survey;","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/CompareChats.js",["81","82","83","84","85"],"import React from 'react';\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button';\n\n\n/*\nInitial:\n- an identifer\n- chatbotA\n- chatbotB\n- text\n\nSet:\n- compare_bot_a\n- compare_bot_b\n\ninst:\n- load_comparison\n*/\n\n\nclass MessageList extends React.Component {\n    render() {\n      return (      \n          <div className=\"message-list\" style={{width: 500}}>                 \n              {this.props.messages.map(message => {\n                  return (\n                    <div class=\"bubbleWrapper\">\n                      <div class={\"bot_a\" == message.senderId ? \"inlineContainer own\" : \"inlineContainer\"}>\n                        <div className={\"bot_a\" != message.senderId ? \"otherBubble other\" : \"ownBubble own\"}>{message.text}</div>\n                      </div>\n                      <span className={\"bot_a\" != message.senderId ? \"other\" : \"own\"}>{\"bot_a\" == message.senderId ? \"Human\" : \"Speaker\"}</span>\n                    </div>\n                  )\n                })\n              }\n        </div>\n      )\n    }\n  }\n\n\nclass CompareChats extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {compare_bot_a: [], compare_bot_b: [], compare_bot_preference: \"\"}; \n    }\n\n    componentDidMount() {\n        const url = window.location.href.split('?')[0]; \n        // get the state\n        axios.get(url+ \"/init\").then(res => {\n            this.setState(res.data, function() {\n                // send an instruction to the backend, specifically, \"load_comparison\"\n                axios.post(url+ \"/update\", Object.assign({}, this.state, {instruction: 'load_comparison'})).then(result => {            \n                    this.setState(result.data);     \n                });\n            });\n        })      \n    }\n\n    render() {\n      if (this.state.pipeline == undefined) return <p>Loading...</p>;      \n      const data = this.state.pipeline[0].data;\n      return (\n        <div>\n            <p style = {{marginBottom: 20, marginTop: 40}}>{data.text}</p>\n        \n            <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', minHeight: '40vh', flexDirection: 'row'}}>\n                <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', minHeight: '40vh', flexDirection: 'column'}}>            \n                    <MessageList messages={this.state.compare_bot_a} />\n                    {this.props.showButtons ? <Button onClick={this.chooseConvoA} variant=\"contained\" color=\"primary\">Choose This Conversation</Button> : null}\n                </div>\n\n                <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', minHeight: '40vh', flexDirection: 'column'}}>            \n                    <MessageList messages={this.state.compare_bot_b} />                    \n                    {this.props.showButtons ? <Button onClick={this.chooseConvoB} variant=\"contained\" color=\"primary\">Choose This Conversation</Button> : null}\n                </div>\n            </div>\n        </div>\n      );\n    }   \n    \n    chooseConvoA = () => {\n        const data = this.state.pipeline[0].data;\n        this.setState({compare_bot_preference: data.chatbotA}, function() {\n            this.popComponent();\n        });\n    }\n\n    chooseConvoB = () => {\n        const data = this.state.pipeline[0].data;\n        this.setState({compare_bot_preference: data.chatbotB}, function() {\n            this.popComponent();\n        });\n    }    \n\n    popComponent = () => {    \n        var title = this.state.pipeline[0].data.identifier;\n        var updateVal = {};\n        updateVal[title] = this.state.compare_bot_preference;\n        updateVal['instruction'] = 'advance';\n        const url = window.location.href.split('?')[0];\n        axios.post(url+ \"/update\", Object.assign({}, this.state, updateVal)).then(res => {        \n          this.setState(res.data, function() { \n                this.props.advance();\n            });\n        })\n    }\n}\n\n\nexport default CompareChats;","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/CompareChatsSurvey.js",["86"],"import React from 'react';\nimport CompareChats from \"./CompareChats\";\nimport Survey from './Survey'\n\n\nclass CompareChatsSurvey extends React.Component {\n\n    constructor(props) {\n      super(props);      \n    }\n\n    render() {      \n      return (\n        <div>\n            <CompareChats advance={this.props.advance} showButtons={false} />\n            <Survey advance={this.props.advance} />\n        </div>\n      );\n    }  \n}\n\n\nexport default CompareChatsSurvey;","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/SubmitMTurk.js",["87"],"import React from 'react';\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button';\n\n\nclass SubmitMTurk extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {};\n    }\n\n    componentDidMount() {      \n        this.setState({complete: false});\n        // const url = window.location.href;            \n        const url = window.location.href.split('?')[0];\n        axios.get(url+ \"/init\").then(res => {\n            this.setState(res.data, function() {\n                this.notifyBackendToCompleteTask();\n            });            \n        })      \n    }\n\n    render() {\n        if (this.state.pipeline == undefined) return <p>Loading...</p>;\n        return (\n            <form name=\"mturk_form\" method=\"post\" id=\"mturk_form\" action={this.state.mturk.end_point}>\n                <input type=\"hidden\" value={this.state.mturk.assignment_id} name=\"assignmentId\" id={this.state.mturk.assignment_id}/>\n                <input type=\"hidden\" value='foo' name=\"bar\"/>\n                <input type=\"hidden\" value={this.state.mturk.end_point} name = \"end_point\"/>\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\">Click here to finish task</Button>\n            </form>\n        );     \n    }\n\n    notifyBackendToCompleteTask = () => {        \n        const url = window.location.href.split('?')[0]; \n        axios.post(url+ \"/update\",\n        Object.assign({}, this.state, {instruction: 'mark_complete', complete: true})).then(res => {            \n            this.setState(res.data);            \n        })\n    }\n}\n\n\nexport default SubmitMTurk;","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/chatbot/Chatbot.js",["88","89","90","91","92"],"import React from \"react\";\nimport axios from \"axios\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport '../App.css';\n\n\nclass MessageList extends React.Component {\n\n  componentDidMount() {\n    this.scrollToBottom();\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  scrollToBottom() {\n    this.el.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  render() {\n    return (      \n        <div className=\"message-list\" style={{width: 500, height: '50vh', overflow: 'scroll'}}>                 \n            {this.props.messages.map(message => {\n                return (\n                  <div class=\"bubbleWrapper\">\n                    <div class={\"You\" == message.senderId ? \"inlineContainer own\" : \"inlineContainer\"}>\n                      <div className={\"You\" != message.senderId ?\"otherBubble other\" : \"ownBubble own\"}>{message.text}</div>\n                    </div>\n                    <span className={\"You\" != message.senderId ?\"other\" : \"own\"}>{message.senderId}</span>\n                  </div>\n                )\n              })\n            }\n            <div ref={el => { this.el = el; }} />\n        </div>\n    )\n  }\n}\n\n\nclass MyChatbot extends React.Component{\n\n    constructor(props) {\n      super(props);\n      this.state = {messages: [], text: \"\", pause_ui: false};      \n    }\n\n    componentDidMount() {\n        const url = window.location.href.split('?')[0];\n        axios.get(url+ \"/init\").then(res => {\n            this.setState(res.data, function() {\n\n              // Force send first message\n              if (this.state.messages.length == 0) {\n                const data = this.state.pipeline[0].data;\n                this.setState({text: data['force_human_message']}, function() {\n                  this.sendMessage();\n                });\n              }\n\n            });\n        });\n    }\n\n    render() {\n        if (this.state.pipeline === undefined) return <p>Loading...</p>;\n        const data = this.state.pipeline[0].data;\n        console.log(data['force_human_message']);\n        return (\n          <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', height: '100vh', flexDirection: 'column'}}>            \n              <p style = {{marginBottom: 20}}>Chat Window</p>\n              <MessageList messages={this.state.messages} />\n              <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', flexDirection: 'row'}}>\n                <TextField id=\"outlined-basic\" placeholder=\"Type message here...\" label=\"Type message here...\" value={this.state.text} onChange={this.textChanged} style={{marginTop: 40, width: 390}} />\n                <Button onClick={this.sendMessage} variant=\"contained\" color=\"primary\" style={{marginTop: 40, marginLeft: 15}}>Send</Button>               \n              </div>\n              <p style = {{marginTop: 40, color: '#b8b8b8'}}>{data['instruction']}</p>\n            </div>\n          );\n    }\n\n    textChanged = (e) => {\n      this.setState({ text: e.target.value });\n    }\n\n    sendMessage = () => {\n\n      console.log(this.state.text);\n\n      if (this.state.pause_ui == true || this.state.text.length < 2) return;\n\n      //TODO: disable UI\n      this.setState({'pause_ui': true})\n\n      // Update the user's message\n      var data = this.state.messages;\n      data.push(\n        {id: this.state.messages.length, senderId: \"You\", text: this.state.text}\n      );\n\n      this.setState({messages: data, text: \"\"}, function() {\n\n        // Send to backend, update data\n        var title = this.state.pipeline[0].data.identifier;\n        var updateVal = {};\n        updateVal[title] = this.state.messages;\n        updateVal['instruction'] = 'request_message';\n        const url = window.location.href.split('?')[0];\n        axios.post(url+ \"/update\", Object.assign({}, this.state, updateVal)).then(res => {        \n          this.setState(res.data, function() { this.popComponent(); });\n\n          //TODO: enable UI\n          this.setState({'pause_ui': false})\n        })\n\n      }); \n    }\n\n    popComponent = (chatbot, options) => {\n      this.props.advance();\n    }\n}\n\nexport default MyChatbot;","/Users/josharnold/Desktop/LEGOEval/app/react_app/src/ConversationSurvey.js",["93","94","95"],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":2,"column":8,"nodeType":"102","messageId":"103","endLine":2,"endColumn":12},{"ruleId":"104","severity":1,"message":"105","line":46,"column":37,"nodeType":"106","messageId":"107","endLine":46,"endColumn":39},{"ruleId":"104","severity":1,"message":"105","line":23,"column":31,"nodeType":"106","messageId":"107","endLine":23,"endColumn":33},{"ruleId":"104","severity":1,"message":"105","line":21,"column":31,"nodeType":"106","messageId":"107","endLine":21,"endColumn":33},{"ruleId":"104","severity":1,"message":"105","line":23,"column":33,"nodeType":"106","messageId":"107","endLine":23,"endColumn":35},{"ruleId":"104","severity":1,"message":"105","line":13,"column":41,"nodeType":"106","messageId":"107","endLine":13,"endColumn":43},{"ruleId":"104","severity":1,"message":"108","line":14,"column":47,"nodeType":"106","messageId":"107","endLine":14,"endColumn":49},{"ruleId":"104","severity":1,"message":"108","line":16,"column":46,"nodeType":"106","messageId":"107","endLine":16,"endColumn":48},{"ruleId":"104","severity":1,"message":"105","line":23,"column":33,"nodeType":"106","messageId":"107","endLine":23,"endColumn":35},{"ruleId":"104","severity":1,"message":"105","line":29,"column":43,"nodeType":"106","messageId":"107","endLine":29,"endColumn":45},{"ruleId":"104","severity":1,"message":"108","line":30,"column":49,"nodeType":"106","messageId":"107","endLine":30,"endColumn":51},{"ruleId":"104","severity":1,"message":"108","line":32,"column":48,"nodeType":"106","messageId":"107","endLine":32,"endColumn":50},{"ruleId":"104","severity":1,"message":"105","line":32,"column":96,"nodeType":"106","messageId":"107","endLine":32,"endColumn":98},{"ruleId":"104","severity":1,"message":"105","line":64,"column":31,"nodeType":"106","messageId":"107","endLine":64,"endColumn":33},{"ruleId":"109","severity":1,"message":"110","line":8,"column":5,"nodeType":"111","messageId":"112","endLine":10,"endColumn":6},{"ruleId":"104","severity":1,"message":"105","line":25,"column":33,"nodeType":"106","messageId":"107","endLine":25,"endColumn":35},{"ruleId":"104","severity":1,"message":"105","line":28,"column":39,"nodeType":"106","messageId":"107","endLine":28,"endColumn":41},{"ruleId":"104","severity":1,"message":"108","line":29,"column":45,"nodeType":"106","messageId":"107","endLine":29,"endColumn":47},{"ruleId":"104","severity":1,"message":"108","line":31,"column":44,"nodeType":"106","messageId":"107","endLine":31,"endColumn":46},{"ruleId":"104","severity":1,"message":"105","line":56,"column":46,"nodeType":"106","messageId":"107","endLine":56,"endColumn":48},{"ruleId":"104","severity":1,"message":"105","line":92,"column":31,"nodeType":"106","messageId":"107","endLine":92,"endColumn":33},{"ruleId":"104","severity":1,"message":"105","line":13,"column":41,"nodeType":"106","messageId":"107","endLine":13,"endColumn":43},{"ruleId":"104","severity":1,"message":"108","line":14,"column":47,"nodeType":"106","messageId":"107","endLine":14,"endColumn":49},{"ruleId":"104","severity":1,"message":"108","line":16,"column":46,"nodeType":"106","messageId":"107","endLine":16,"endColumn":48},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]